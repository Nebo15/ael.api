language: elixir
sudo: required
cache:
  directories:
    - deps
services:
  - docker
elixir:
  - 1.4.2
otp_release:
  - 19.2
env:
  global:
    - MIX_ENV=test
    - DOCKER_HUB_ACCOUNT=place_your_account_name_here
    - MAIN_BRANCHES="master develop staging" # Branches on which you want version to be incremented
    - RELEASE_BRANCH="master"
    # Docker and GitHub credentials
    # - secure: "..."
branches:
  # Releases are generated automatically, stop infinite build loop
  except:
    - /[0-9]*\.[0-9]*\.[0-9]*/
before_install:
script:
  # Increment version in mix.exs
  # Uncomment this if you want to increment patch version on each Travis build.
  # - ./bin/ci/version-increment.sh
  # Install dependencies if Travis won't do it by default
  # - mix deps.get
  # Run all tests except pending ones
  - mix test --exclude pending --trace
  # Submit code coverage report to Coveralls
  # Add --pro if you using private repo.
  - mix coveralls.travis --exclude pending
  # Run static code analysis
  - mix credo --strict
  # Check code style
  - mix dogma
  # Build Docker container
  - ./bin/build.sh
  # Initialize DB for Docker container
  - MIX_ENV=dev mix ecto.setup
  # Run Docker container
  - sudo ./bin/start.sh
  - sleep 5
  - docker ps
  - RUNNING_CONTAINERS=`docker ps | wc -l`;
    if [ "${RUNNING_CONTAINERS//[[:space:]]/}" == "1" ]; then
      echo "[E] Container is not started\!";
      docker logs ael_api --details --since 5h;
      exit 1;
    fi;
  # Run acceptance tests on Docker container
  - "CONTAINER_HTTP_HOST=localhost CONTAINER_HTTP_PORT=4000 mix test test/acceptance"
after_failure:
  - docker logs ael_api --details --since 5h
# Also you can
# - automatically build images and push them to Docker Hub;
# - create new git tag with build version and GitHub release on it.
#
# 1, Encrypt your docker user name and password and add to environment variables:
#
#   $ travis encrypt DOCKER_USERNAME=sample_username DOCKER_PASSWORD=strong_password
#
# More info: https://docs.travis-ci.com/user/encryption-keys/
#
# 2. Add env "DOCKER_HUB_ACCOUNT=org_name" to set Hub's organization or account that will hold images.
# Sample:
#
#   env:
#     global:
#       - DOCKER_HUB_ACCOUNT=org_name # Docker Hub Account or Organization that will hold images
#       - secure: "encrypeted_credentials" # Encrypted credentials to login into Docker Hub
#
# 3. Uncomment following lines:
#
# after_success:
#   # Submit Docker container to Docker Hub and create GitHub Release by pushing tag with changelog
#   - ./bin/ci/push.sh
#
# 4. If you are using public Travis-CI version it doesn't support deploy keys, so you will need to add a user-token to
# push script manually.
# 5. If you use Heroku Container Engine, you can auto-deploy changes
# (make sure HEROKU_API_TOKEN secret and HEROKU_APP_NAME env is set):
#   - ./bin/ci/deploy.sh
